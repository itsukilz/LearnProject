# 进度.todo
- Stack

# Stack
## Baseball Game 2018/1/21
### Problem
> You're now a baseball game point recorder.
Given a list of strings, each string can be one of the 4 following types:
Integer (one round's score): Directly represents the number of points you get in this round.
"+" (one round's score): Represents that the points you get in this round are the sum of the last two valid round's points.
"D" (one round's score): Represents that the points you get in this round are the doubled data of the last valid round's points.
"C" (an operation, which isn't a round's score): Represents the last valid round's points you get were invalid and should be removed.
Each round's operation is permanent and could have an impact on the round before and the round after.
You need to return the sum of the points you could get in all the rounds.
Example 1:
Input: ["5","2","C","D","+"]
Output: 30
Explanation: 
Round 1: You could get 5 points. The sum is: 5.
Round 2: You could get 2 points. The sum is: 7.
Operation 1: The round 2's data was invalid. The sum is: 5.  
Round 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.
Round 4: You could get 5 + 10 = 15 points. The sum is: 30.
Example 2:
Input: ["5","-2","4","C","D","9","+","+"]
Output: 27
Explanation: 
Round 1: You could get 5 points. The sum is: 5.
Round 2: You could get -2 points. The sum is: 3.
Round 3: You could get 4 points. The sum is: 7.
Operation 1: The round 3's data is invalid. The sum is: 3.  
Round 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.
Round 5: You could get 9 points. The sum is: 8.
Round 6: You could get -4 + 9 = 5 points. The sum is 13.
Round 7: You could get 9 + 5 = 14 points. The sum is 27.
Note:
The size of the input list will be between 1 and 1000.
Every integer represented in the list will be between -30000 and 30000.
### Analyze
根据不同输入，执行不同操作。发现操作"C"会unvaild上一个score，所以可以考虑用stack来储存scores，c = pop。

这是抽象层面的解决方案，落实到Python语言来讲，会发现python的list其实可以充当stack，所以不需要自己创建一个stack。
```python
scores = []
#push
scores.append(x)
#pop, 注意pop是不返回的。
scores.pop()
#peek
scores[-1]
#size
len(scores)
#is_empty()
len(scores)==0
```

最终的解决方案：
```python

class Solution(object):
    def calPoints(self, ops):
        """
        :type ops: List[str]
        :rtype: int
        """
        history = []
        for op in ops:
            if op == "C":
                history.pop()
            elif op == "D":
                history.append(history[-1]*2)
            elif op == "+":
                history.append(history[-2]+history[-1])
            else:
                history.append(int(op))
        return sum(history)
                
```
### Point
1. 最开始不熟悉leetcode怎么使用，现在知道了，重要写其中函数即可。
2. 我对python其实比java熟悉，我只懂java语法方面的知识，不懂静态非静态，类之间怎么引用。所以后来还是用python来写。
3. 在写的过程中意识到其实python我也有些生疏，其实算法本质是思想，python也有好的算法与数据结构的书，可以共同参考。重要的就是怎么利用思想去解决问题。
## Next Greater Element I 2018/1/22
### Problem
You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.
### Analyze
- 题意
	输入两个数组,num1, num2，1是2的子集。需要输出num1中每个数在2右侧第一个比它大的数（next greater），如果没有则为-1.
	例如：		
	Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
	Output: [-1,3,-1]


- 思考过程
1. 暴力，对每个1中的数，都在num2中遍历去找。最坏情况是2是从大到小排的，那么时间复杂度是n*n。（可以有多种方式实现，用dic存储1中的数能够优化找1数的时间）
2. 优化，思路1的问题在于每个数都要遍历一遍去找，是否可以实现只遍历一遍就找到所有数的next greater? 很快能想到以下的方法：
```python
	# convert findNums to dic
	dic = {}
	for i in findNums:
		dic[i] = -1
	# convert nums to stack
	s = Stack()
	for i in nums[::-1]:
		s.push(i)

	temp = []
	while s.is_empty()==False:
		pop = s.peek()
		s.pop()
		
		if dic.get(pop,0)!=0:
			if s.size()==0:
				break
			else:
				peek = s.peek()
				# check all temp
				if len(temp)!=0:
					deltemp = []
					for i in temp:
						if peek > i:
							dic[i] = peek
							deltemp.append(i)
					for i in deltemp:
						temp.remove(i)

				if peek > pop:
					dic[pop] = peek

				else:
					temp.append(pop)

	result = []
	for i in findNums: 
		result.append(dic[i])
	return result

```
可以看到我使用了一个stack去储存num2，用一个temp储存所有next <= i的i. deltemp的作用是如果check符合了，需要把这些符合的删掉。

3. 仔细研究其他submission后，我突然意识到第二个思路没问题，但实现起来过于繁琐了，我在一个不需要stack的地方用了stack——num2， 在一个可以使用stack来简化的地方用了list，明显是没有真正理解stack只是拿它套用。
	temp的目的是：对每个peek，遍历所有temp,删掉小于temp的。 可以用stack来做，删掉就直接pop()
	为什么我之前没有用stack来做temp呢？因为思维有漏洞，我觉得可能会出现后进去的比先进去的大，所以我认为需要遍历list。但实际上按照我这么设计，如果后进去的比先进去的大，那它就不会进去，所以后进去的一定比先进去的小。所以是可以使用stack的。
```python
def nextGreaterElement(findNums, nums):
	# convert findNums to dic
	dic = {}
	for i in findNums:
		dic[i] = -1

	temp = []
	length = len(nums)
	
	for i in range(length):
		pop = nums[i]
		if dic.get(pop,0)!=0:
			if i==length-1:
				break
			else:
				peek = nums[i+1]
				# check all temp
				while temp and temp[-1] < peek:
					dic[temp[-1]] = peek
					temp.pop()
				
				if peek > pop:
					dic[pop] = peek
				else:
					temp.append(pop)

	result = []
	for i in findNums: 
		result.append(dic[i])
	return result

```
### Point
这道题目收获很多，一是自己作出了优化，更重要的是通过看别人的解答，意识到自己的漏洞，自己对stack的套用。什么时候你可以用stack，你可以按照一个方向去删除，删除的方向是进入的反方向。
同时，python里完全不需要自己实现stack，list已经可以实现所有的stack操作。
## Min Stack 2018/1/23
### Problem
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

### Analyze
设计一个stack，支持push,pop,top,以及constant time获取当前stack中最小的数。很明显重点在于最后一个要求。
思路是，计算最小值或者随时维护一个排序的话，是达不到constant time的，必须储存。很自然我需要把加入任何一个数后本stack的最小值保存起来，于是就想到用一个minimun stack来保存加入每个数后的最小值。
```python
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.mainstack = []
        self.minimum = []

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        if len(self.minimum) == 0:
            self.minimum.append(x)
        else:
            self.minimum.append(min(self.minimum[-1],x))
        self.mainstack.append(x)

    def pop(self):
        """
        :rtype: void
        """
        self.mainstack.pop()
        self.minimum.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.mainstack[-1]

    def getMin(self):
        """
        :rtype: int
        """
        return self.minimum[-1]

```

### Point
思路正确，python如何写类不熟悉，后来才知道，数据本身是需要用self.来储存的。
## ValidParentheses 2018/1/23
### Problem
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.
### Analyze
很简单的一道题，用一个stack去储存所有左边的符号，遇到右边的符号就去匹配。匹配成功就pop，不成功就false。
```python
def isValid(s):
    """
    :type s: str
    :rtype: bool
    """
    stack = []
    for char in s:
        if char in ["(","[","{"]:
            stack.append(char)
        else:
            if len(stack) == 0:
                return False
            if char == ")" and stack[-1]=="(":
                stack.pop()
            elif char == "}" and stack[-1]=="{":
                stack.pop()
            elif char == "]" and stack[-1]=="[":
                stack.pop()
            else:
                return False
    if len(stack) != 0:
        return False
    return True

if __name__ == '__main__':
    print isValid("()[]{()}")
    print isValid("[{}")

```
### Point
是需要自己进行测试的，考虑几种情况，能帮助自己意识到哪里没考虑全。
## DailyTemperatures 2018/1/23
### Problem
Given a list of daily temperatures, produce a list that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.

For example, given the list temperatures = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].

Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].
### Analyze
本题和Next Greater Element I 一样，做法也一样，一遍AC。
```python
class Solution(object):
    def dailyTemperatures(self, temperatures):
        """
        :type temperatures: List[int]
        :rtype: List[int]
        """
        length = len(temperatures)
        dic = dict.fromkeys(range(length),0)
        temp = []
        for i in range(length-1):
            now = temperatures[i]
            plusone = temperatures[i+1]
            while temp and plusone > temperatures[temp[-1]]:
                dic[temp[-1]] = i+1-temp[-1]
                temp.pop()
            if plusone > now:
                dic[i] = 1
            else:
                temp.append(i)
        result = []
        for i in range(length):
            result.append(dic[i])
        return result
```
## Asteroid Collision_735 2018/1/23
### Problem
We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

Example 1:
Input: 
asteroids = [5, 10, -5]
Output: [5, 10]
Explanation: 
The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.
Example 2:
Input: 
asteroids = [8, -8]
Output: []
Explanation: 
The 8 and -8 collide exploding each other.
Example 3:
Input: 
asteroids = [10, 2, -5]
Output: [10]
Explanation: 
The 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.
Example 4:
Input: 
asteroids = [-2, -1, 1, 2]
Output: [-2, -1, 1, 2]
Explanation: 
The -2 and -1 are moving left, while the 1 and 2 are moving right.
Asteroids moving the same direction never meet, so no asteroids will meet each other.
Note:

The length of asteroids will be at most 10000.
Each asteroid will be a non-zero integer in the range [-1000, 1000]..
### Analyze
题意需要借助示例才比较好懂。正的方向为右，负的方向为左，数之间分左右。
难点在于，向右的小行星可能会一直往左走直到碰到比它size更大的数，这个怎么用stack实现。

第一个版本我用了一个helper函数，这样就可以递归调用，逻辑很清晰且简洁。但好像leetcode不支持helper函数。
```python
def asteroidCollision(asteroids):
    """
    :type asteroids: List[int]
    :rtype: List[int]
    """
    stack = []
    for x in asteroids:
        stack = check(stack,x)

    return stack

def check(stack,x):
    if len(stack) == 0:
            stack.append(x)
            return stack
    else:
        peek = stack[-1]
        #print peek,x
        if (x>0 and peek>0) or (x<0 and peek<0) or (x>0 and peek<0):
            stack.append(x)
            return stack
        elif abs(x) > abs(stack[-1]):
            stack.pop()
            return check(stack,x)
        elif abs(x) == abs(stack[-1]):
            stack.pop()
            return stack

if __name__ == '__main__':
    print  asteroidCollision([-2, -1, 1, 2])

```

第二个版本在第一个版本基础上改进，将不断往左前进用while  和 stack来实现。
```python
class Solution(object):
    def asteroidCollision(self, asteroids):
        """
        :type asteroids: List[int]
        :rtype: List[int]
        """
        stack = []
        for x in asteroids:
            if len(stack) == 0:
                    stack.append(x)
            else:
                flag = 0
                while len(stack) != 0:
                    peek = stack[-1]
                    if (x>0 and peek>0) or (x<0 and peek<0) or (x>0 and peek<0):
                        stack.append(x)
                        flag = 0
                        break
                    elif abs(x) > abs(stack[-1]):
                        stack.pop()
                        flag = 1
                    elif abs(x) == abs(stack[-1]):
                        stack.pop()
                        flag = 0
                        break
                    else:
                        flag = 0
                        break
                if(len(stack)==0 and flag==1):
                    stack.append(x)
        return stack  


```

### Point
情况有很多种，需要耐心一点。
## Exclusive Time of Functions 2018/1/24
### Problem
Given the running logs of n functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions.

Each function has a unique id, start from 0 to n-1. A function may be called recursively or by another function.

A log is a string has this format : function_id:start_or_end:timestamp. For example, "0:start:0" means function 0 starts from the very beginning of time 0. "0:end:0" means function 0 ends to the very end of time 0.

Exclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function's exclusive time. You should return the exclusive time of each function sorted by their function id.

Example 1:
Input:
n = 2
logs = 
["0:start:0",
 "1:start:2",
 "1:end:5",
 "0:end:6"]
Output:[3, 4]
Explanation:
Function 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. 
Now function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.
Function 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. 
So function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.
Note:
Input logs will be sorted by timestamp, NOT log id.
Your output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.
Two functions won't start or end at the same time.
Functions could be called recursively, and will always end.
1 <= n <= 100
### Analyze
这个题目需要正确理解题意——0开始，1开始，1结束，0结束，在1执行的时候0没有执行。如何做到这一点？
摸索很久之后意识到，最简便的方法还是减，1函数stop后，1的时间加上，0减去1的时间。

```python
def exclusiveTime(n, logs):
    """
    :type n: int
    :type logs: List[str]
    :rtype: List[int]
    """
    dic = dict.fromkeys(range(n),0)
    stack = []
    for log in logs:
        loglist = log.split(":")
        logfunc = loglist[1]
        logx = (int(loglist[0]),int(loglist[2]))
        
        if logfunc == "start":
            stack.append(logx)

        else:
            peek = stack[-1]
            print log, stack
            dic[peek[0]] += logx[1]-peek[1]+1
            stack.pop()
            if len(stack)!=0:
                dic[stack[-1][0]] -= logx[1]-peek[1]+1

    result = []
    for i in range(n):
        result.append(dic[i])
    return result

if __name__ == '__main__':
    print exclusiveTime(1,["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"])

``` 
### Point
1. 技巧：如果有这个方法有太多情况需要写（if-else），自己模拟都模拟不过来，很可能方法错了。
2. 心态：如果一会没想出来不要沮丧，这什么都不代表。多的是重新静下心来做很快就做出来的情况，所以不要放弃，可以休息一下，但不要心情不好。