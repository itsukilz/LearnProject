See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 2 warnings)
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 15 warnings)

Correctness:  36/43 tests passed
Memory:       63/87 tests passed
Timing:       92/136 tests passed

Aggregate score: 81.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.2K Dec 14 07:08 Deque.java
 378 Dec 14 07:08 Permutation.java
2.2K Dec 14 07:08 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:9: warning: [unchecked] unchecked cast
		a = (Item[]) new Object[2];
		             ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:38: warning: [unchecked] unchecked cast
		Item[] tempa =  (Item[]) new Object[n];
		                         ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'oldfirst' but never reads the variable.  At Deque.java:[line 60]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'oldlast' but never reads the variable.  At Deque.java:[line 70]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Deque.java:10: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Deque.java:11: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Deque.java:12: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Deque.java:95: Avoid unused local variables, such as 's'. [UnusedLocalVariable]
RandomizedQueue.java:50: The private instance (or static) variable 'tempa' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:2:8: Unused import statement for 'edu.princeton.cs.algs4.StdIn'. [UnusedImports]
[WARN] Deque.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Deque.java:100:12: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] Permutation.java:4:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Permutation.java:10:26: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Permutation.java:10:27: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Permutation.java:10:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:6:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] RandomizedQueue.java:30:29: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:30:31: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:39:21: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:39:25: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:39:26: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:54:32: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] RandomizedQueue.java:74:14: '=' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 15 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==> passed

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    - number of student   entries = 2
    - number of reference entries = 1
    - iterator failed after applying operation 7
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()    ==> 1
         deque.addLast(3)
         deque.removeLast()    ==> 3
         deque.addLast(5)
         deque.addLast(6)
         deque.removeLast()    ==> 6

  * m = 50
    - number of student   entries = 3
    - number of reference entries = 2
    - iterator failed after applying operation 6
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()   ==> 1
         deque.addFirst(3)
         deque.addLast(4)
         deque.addFirst(5)
         deque.removeLast()    ==> 4

  * m = 100
    - number of student   entries = 2
    - number of reference entries = 1
    - iterator failed after applying operation 5
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.addFirst(3)
         deque.removeFirst()   ==> 3
         deque.removeLast()    ==> 2

  * m = 1000
    - number of student   entries = 2
    - number of reference entries = 1
    - iterator failed after applying operation 13

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 15/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 32

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:746)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:750)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:751)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1170)

==> FAILED

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:774)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(16)
         rq.size()        ==> 1
         rq.enqueue(330)
         rq.enqueue(177)
         rq.dequeue()

  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:775)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> true
         rq.enqueue(191)
         rq.size()        ==> 1
         rq.enqueue(72)
         rq.enqueue(661)
         rq.dequeue()

  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:777)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:778)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.random(TestRandomizedQueue.java:115)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:779)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1176)

==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 6: create multiple randomized queue objects at the same time
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: 16

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkTwoRandomizedQueues(TestRandomizedQueue.java:264)
    TestRandomizedQueue.test6(TestRandomizedQueue.java:821)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1182)

  * n = 100
    java.lang.ArrayIndexOutOfBoundsException: 128

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkTwoRandomizedQueues(TestRandomizedQueue.java:264)
    TestRandomizedQueue.test6(TestRandomizedQueue.java:822)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1182)

==> FAILED

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:872)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:902)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

  * m = 1000
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:872)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:903)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:993)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

  * n = 4, trials = 12000
  * n = 5, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: 8

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:568)
    TestRandomizedQueue.test14(TestRandomizedQueue.java:995)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1206)

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 12/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  I
  F
  D

  % java Permutation 3 < distinct.txt
  G
  E
  H

  % java Permutation 8 < duplicates.txt
  AA
  CC
  BB
  BB
  BB
  BB
  BB
  CC

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  the
  best
  worst
  it
  it
  of
  age
  it

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.04
=> passed      256000     0.09
=> passed      512000     0.18
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.06
=> passed      256000     0.09
=> passed      512000     0.18
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          424         
=> passed       64         3112         
=> passed      256        12328         
=> passed     1024        49192         
=> passed     4096       196648         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 48.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> FAILED        8          856   (1.4x)
=> FAILED       64         6232   (1.9x)
=> FAILED      256        24664   (2.0x)
=> FAILED     1024        98392   (2.0x)
=> FAILED     4096       393304   (2.0x)
==> 0/5 tests passed

Memory: 96.00 n - 8.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> FAILED        8          424   (1.8x)
=> FAILED       64         3112  (13.0x)
=> FAILED      256        12328  (51.4x)
=> FAILED     1024        49192 (205.0x)
=> FAILED     4096       196648 (819.4x)
==> 0/5 tests passed

Memory after adding n = 2^i items: 71498.91   (R^2 = 0.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 6 of 100
    - sequence of operations was:
         deque.addFirst("IHRGSYZPYW")
         deque.addFirst("ZOLNFQLQHA")
         deque.addFirst("YQXFWWKQCT")
         deque.addFirst("WKHZBFZVEN")
         deque.addFirst("VYUIYIXIWM")
         deque.removeFirst()     ==> VYUIYIXIWM
    - loitered object(s):
      VYUIYIXIWM

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 15 of 100
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 5 of 100
    - sequence of operations was:
         deque.addLast("OBKDYSJJHN")
         deque.addLast("FLEHGQQEMS")
         deque.addLast("BRSMWWUKYK")
         deque.addLast("XMAXENHZBW")
         deque.removeFirst()     ==> OBKDYSJJHN
    - loitered object(s):
      OBKDYSJJHN

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 6 of 100
    - sequence of operations was:
         deque.addLast("ENQZBZWLUD")
         deque.addLast("MLXJZGFVYS")
         deque.addLast("POLPFTCOAN")
         deque.addLast("WHWELUDSGF")
         deque.addLast("DPHTJOIOEP")
         deque.removeLast()      ==> DPHTJOIOEP
    - loitered object(s):
      DPHTJOIOEP

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 5 of 100
    - sequence of operations was:
         deque.addLast("DPVOHKYCHG")
         deque.addLast("OAHNJVPHGE")
         deque.addFirst("SPWOSHXLTD")
         deque.addLast("CEJNZLEOIB")
         deque.removeFirst()     ==> SPWOSHXLTD
    - loitered object(s):
      SPWOSHXLTD

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 9 of 100
    - sequence of operations was:
         deque.addFirst("ISDFLRSZZP")
         deque.removeFirst()     ==> ISDFLRSZZP
         deque.addLast("WQFCTQEXKH")
         deque.removeFirst()     ==> WQFCTQEXKH
         deque.addFirst("QTZKBOIKRW")
         deque.removeLast()      ==> QTZKBOIKRW
         deque.addLast("ZZCEKIXYCK")
         deque.addLast("JDXVOYXFJN")
         deque.removeFirst()     ==> ZZCEKIXYCK
    - loitered object(s):
      ZZCEKIXYCK

==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
    - failed on trial 381 of 512
    - when current size of Deque was 222 objects;
    - the call to addLast()
    - caused a change in memory of -144 bytes
    - any change of more than 96 bytes fails the test
==> FAILED

Total: 15/28 tests passed!

================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1080         
=> passed       64         2104         
=> passed      128         4152         
=> passed      256         8248         
=> passed      512        16440         
=> passed     1024        32824         
=> passed     2048        65592         
=> passed     4096       131128         
=> passed     8192       262200         
==> 9/9 tests passed

Memory: 32.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1080         
=> passed       65         2104         
=> passed      129         4152         
=> passed      257         8248         
=> passed      513        16440         
=> passed     1025        32824         
=> passed     2049        65592         
=> passed     4097       131128         
=> passed     8193       262200         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 128

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    MemoryOfRandomizedQueue.test3(MemoryOfRandomizedQueue.java:209)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:736)

Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1080         
=> passed       64         2104         
=> passed      128         4152         
=> passed      256         8248         
=> passed      512        16440         
=> passed     1024        32824         
=> passed     2048        65592         
=> passed     4096       131128         
=> passed     8192       262200         
==> 9/9 tests passed

Memory: 32.00 n + 56.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> FAILED       32         1080   (4.5x)
=> FAILED       64         2104   (8.8x)
=> FAILED      128         4152  (17.3x)
=> FAILED      256         8248  (34.4x)
=> FAILED      512        16440  (68.5x)
=> FAILED     1024        32824 (136.8x)
=> FAILED     2048        65592 (273.3x)
=> FAILED     4096       131128 (546.4x)
=> FAILED     8192       262200 (1e+03x)
==> 0/9 tests passed

Memory: 32.00 n + 56.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32          192         
=> passed       64          320         
=> passed      128          576         
=> passed      256         1088         
=> passed      512         2112         
=> passed     1024         4160         
=> passed     2048         8256         
=> passed     4096        16448         
=> passed     8192        32832         
==> 9/9 tests passed

Memory: 4.00 n + 64.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
    java.lang.ArrayIndexOutOfBoundsException


Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
    java.lang.ArrayIndexOutOfBoundsException



  * 200 random operations (0.2, 0.8, 0.0)
    java.lang.ArrayIndexOutOfBoundsException



  * 200 random operations (0.6, 0.2, 0.2)
    java.lang.ArrayIndexOutOfBoundsException



  * 200 random operations (0.2, 0.4, 0.4)
==> FAILED

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        7          184         
=> passed       15          312         
=> passed       31          568         
=> passed       63         1080         
=> passed      127         2104         
=> passed      255         4152         
=> passed      511         8248         
=> passed     1023        16440         
=> passed     2047        32824         
==> 9/9 tests passed

Memory: 16.00 n + 72.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException


Min observed memory for RandomizedQueue: 16.00 n + 72.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 56.00   (R^2 = 1.000)

Running 57 total tests.

Total: 46/57 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 55 total tests.

Test 1a-1g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.07
=> passed     2048000     0.11
==> 12/12 tests passed


Test 2a-2g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.03
=> passed     2048000     0.07
==> 12/12 tests passed


Test 3a-3g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.04
=> passed     2048000     0.14
==> 12/12 tests passed


Test 4a-4g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.03
=> passed     1024000     0.04
=> passed     2048000     0.03
==> 12/12 tests passed


Test 5a-5g: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst()/removeLast() and addFirst()/addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed       16385     0.00
=> passed       32767     0.00
=> passed       32768     0.00
=> passed       32769     0.00
==> 7/7 tests passed

Total: 55/55 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 58 total tests.

Test 1: make n calls to enqueue(); make n calls to dequeue();
        count calls to StdRandom
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: 16

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.countCallsToStdRandomEnqueueDequeue(TimeRandomizedQueue.java:26)
    TimeRandomizedQueue.test1(TimeRandomizedQueue.java:303)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:445)


  * n = 100
    java.lang.ArrayIndexOutOfBoundsException: 128

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.countCallsToStdRandomEnqueueDequeue(TimeRandomizedQueue.java:26)
    TimeRandomizedQueue.test1(TimeRandomizedQueue.java:304)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:445)


  * n = 1000
    java.lang.ArrayIndexOutOfBoundsException: 1024

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.countCallsToStdRandomEnqueueDequeue(TimeRandomizedQueue.java:26)
    TimeRandomizedQueue.test1(TimeRandomizedQueue.java:305)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:445)


==> FAILED

Test 2: make n calls to enqueue(); make n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue(); iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:183)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:275)
    TimeRandomizedQueue.test4(TimeRandomizedQueue.java:334)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:454)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/12 tests passed


Test 5a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 8

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:183)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:275)
    TimeRandomizedQueue.test5(TimeRandomizedQueue.java:345)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:457)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/12 tests passed


Test 6a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 4

    RandomizedQueue.resize(RandomizedQueue.java:40)
    RandomizedQueue.dequeue(RandomizedQueue.java:34)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:183)
    TimeRandomizedQueue.timeRandomOperations(TimeRandomizedQueue.java:275)
    TimeRandomizedQueue.test6(TimeRandomizedQueue.java:356)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:460)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/12 tests passed


Test 7a-g: make n calls to enqueue(); iterate over the n items
           by calling next() and hasNext().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.09
=> passed     2048000     0.16
==> 12/12 tests passed


Test 8a-g: make n calls to enqueue(); interleave n calls each
           to dequeue() and enqueue().

                    n  seconds
----------------------------------
    java.lang.ArrayIndexOutOfBoundsException


=> FAILED        1025   [ Test did not complete due to an exception. ]

==> 0/7 tests passed

Total: 14/58 tests passed!
