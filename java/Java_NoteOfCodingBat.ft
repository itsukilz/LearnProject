# 进度.todo
- warmup*2 @done(2017-12-28)
- string1 @done(2017-12-28)
- array1 @done(2018-01-01)
- logic1,logic2 @done(2018-01-01)
- map1,map2 @done(2018-01-01)
- functional 1 @done(2018-01-01)
- string2 @done(2018-01-01)
- string3
- functional2
- array2
- array3
- ap1
- recursion1
- recursion2
# Warmup-1 
## notString
- Given a string, return a new string where "not " has been added to the front. However, if the string already begins with "not", return the string unchanged. Note: use .equals() to compare 2 strings.

	notString("candy") → "not candy"
	notString("x") → "not x"
	notString("not bad") → "not bad"
-  解答：
		1. str.length() 要有括号
		2. str.substring(start,end) return [start,end)
		3. 在str.substring()中，特别需要注意的是，很容易出现输入的string长度小于你的start和end，所以要用str.length()来做预判断，防止长度不够导致的错误。
## startOz
- if - else if - 不能就这样结束，每一种情况都必须有返回语句。所以必须加上一个else。
- a>b ? 1:0 - 很好记，是否正确，正确就是:前面的，不正确就是:后面的。
## intMax
- 数组的初始化：`int[] k = new int[]{a,b,c};`
## stringE
- Return true if the given string contains between 1 and 3 'e' chars. 遍历整个字符串来找某个字符串出现次数
- 解答：
		1.`str.indexOf(find,start)` 从start开始用左往右找find
		2.`str.lastIndexOf(find,start)` 从start开始用右往左找find
		3.思路就是从0开始找find，如果没找到，就break，找到了就计数，并且从找到的地方+find.length()继续往后找；
```java
public boolean stringE(String str) {
  int count = 0;
  int start = 0;
  while (true) {
    int found = str.indexOf("e",start);
    if(found!=-1) count++;
    else break;
    start = found+1;
  }
  if(count>=1 && count<=3) return true;
  else return false;
}
```
## lastDigit
- 数字转string `Integer.toString(9);Double.toString(10);`
## everyNth
- 遍历一个string的每一个字符（注意字符的类型是char)：
```java
String s = "xyz";
for(int i = 0; i < s.length(); i++)
{
   char c = s.charAt(i);
}
```
# Warmup-2
## doubleX
如何检验string中某一个位置的字符是什么呢？
有两种方案：
1. 摘取字符，用字符比较；`str.charAt(first)=='x'` ,注意用字符比较时要用`==` 和`''`.
2. 摘取字符串，用字符串比较；`str.substring(i+1, i+2).equals("x");` 注意字符串比较要用`str.equals("")`;
## arrayCount9 
注意，`String.length()`, 而数组用 `nums.length`
## has271
- Additionally the 271 counts even if the a differs by 2 or less from the correct value.
这句话的意思是，even if the a differs from the correct value by 2 or less. differs from 意为 Math.abs(a-correct), 总意思为：`Math.abs(a-correct)<=2`;
# String-1
## extraEnd 
抽取最后两个字符，重复三遍。 python里面是有string*n的，但java里没有。
## comboString
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).


comboString("Hello", "hi") → "hiHellohi"
comboString("hi", "Hello") → "hiHellohi"
comboString("aaa", "b") → "baaab"

- 本来题目很简单，最初的程序写成了：
```java
  String short = ((a.length() > b.length()) ? b:a);
  String long = ((a.length() > b.length()) ? a:b);
  return short+long+short;
```
	结果一直报错，看了很久才意识到，short和long是保留关键字，不应该用它们作为变量名。改成以下就好了。
```java
  String sshort = ((a.length() > b.length()) ? b:a);
  String slong = ((a.length() > b.length()) ? a:b);
  return sshort+slong+sshort;
```
## atFirst
- 还是那个问题，如果有if-else if-else if ，一定要有个else，覆盖return。
# Logic-1
## lessBy10
题意理解特别重要,`if one of them is 10 or more less than one of the others.` 是什么意思？
断句应该是`if one of them is 10 or more, less than one of the others.`
## sumLimit
- 如何计算一个int值的长度？
- 转化成string，再算该string的长度。`String.valueOf(x).length();`
# Map-1
```java
map.containsKey(key); // return false or true;
map.put(key,value); //赋值
map.get(key) //取值 or null
map.remove(key) //removes the key
```
# Map-2
## word0
1. 如何新建一个map？
要确定map的key和value的类型。`Map<String,Integer> map = new HashMap<String,Integer> ();`

2. 如何循环一个数组？
如果不需要重新修改strings，用`for(String s : strings) `
如果需要重新修改strings，用`for(int i=0; i<strings.length; i++)`
# Functional-1
## doubling
- list.replaceAll()
```java
public List<Integer> doubling(List<Integer> nums) {
  nums.replaceAll(n -> n * 2);
  return nums;
}
```
- list.removeIf()  `nums.removeIf(n -> n<10);`
## removeX
这个 `n -> f(n)`，是可以写一个函数的。例如：

```java
public List<String> noX(List<String> strings) {
  strings.replaceAll(n -> removeX(n));
  return strings;
}
public String removeX(String s){
  String r = "";
  for(int i = 0; i<s.length(); i++){
    if(s.charAt(i)!='x')
      r+=s.charAt(i);
  }
  return r;
}
```