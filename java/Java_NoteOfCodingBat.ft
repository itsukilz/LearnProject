# 进度.todo
- warmup*2 @done(2017-12-28)
- string1 @done(2017-12-28)
- array1 @done(2018-01-01)
- logic1,logic2 @done(2018-01-01)
- map1,map2 @done(2018-01-01)
- functional 1 @done(2018-01-01)
- string2 @done(2018-01-01)
- string3 @done(2018-01-03)
- functional2 @done(2018-01-02)
- array2 @done(2018-01-04)
- array3 @done(2018-01-05)
- ap1 @done(2018-01-25)
- recursion1 @done(2018-01-25)
- recursion2 @done(2018-01-25)
# Warmup-1 
## notString
- Given a string, return a new string where "not " has been added to the front. However, if the string already begins with "not", return the string unchanged. Note: use .equals() to compare 2 strings.

	notString("candy") → "not candy"
	notString("x") → "not x"
	notString("not bad") → "not bad"
-  解答：
		1. str.length() 要有括号
		2. str.substring(start,end) return [start,end)
		3. 在str.substring()中，特别需要注意的是，很容易出现输入的string长度小于你的start和end，所以要用str.length()来做预判断，防止长度不够导致的错误。
## startOz
- if - else if - 不能就这样结束，每一种情况都必须有返回语句。所以必须加上一个else。
- a>b ? 1:0 - 很好记，是否正确，正确就是:前面的，不正确就是:后面的。
## intMax
- 数组的初始化：`int[] k = new int[]{a,b,c};`
## stringE
- Return true if the given string contains between 1 and 3 'e' chars. 遍历整个字符串来找某个字符串出现次数
- 解答：
		1.`str.indexOf(find,start)` 从start开始用左往右找find
		2.`str.lastIndexOf(find,start)` 从start开始用右往左找find
		3.思路就是从0开始找find，如果没找到，就break，找到了就计数，并且从找到的地方+find.length()继续往后找；
```java
public boolean stringE(String str) {
  int count = 0;
  int start = 0;
  while (true) {
    int found = str.indexOf("e",start);
    if(found!=-1) count++;
    else break;
    start = found+1;
  }
  if(count>=1 && count<=3) return true;
  else return false;
}
```
## lastDigit
- 数字转string `Integer.toString(9);Double.toString(10);`
## everyNth
- 遍历一个string的每一个字符（注意字符的类型是char)：
```java
String s = "xyz";
for(int i = 0; i < s.length(); i++)
{
   char c = s.charAt(i);
}
```
# Warmup-2
## doubleX
如何检验string中某一个位置的字符是什么呢？
有两种方案：
1. 摘取字符，用字符比较；`str.charAt(first)=='x'` ,注意用字符比较时要用`==` 和`''`.
2. 摘取字符串，用字符串比较；`str.substring(i+1, i+2).equals("x");` 注意字符串比较要用`str.equals("")`;
## arrayCount9 
注意，`String.length()`, 而数组用 `nums.length`
## has271
- Additionally the 271 counts even if the a differs by 2 or less from the correct value.
这句话的意思是，even if the a differs from the correct value by 2 or less. differs from 意为 Math.abs(a-correct), 总意思为：`Math.abs(a-correct)<=2`;
# String-1
## extraEnd 
抽取最后两个字符，重复三遍。 python里面是有string*n的，但java里没有。
## comboString
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).


comboString("Hello", "hi") → "hiHellohi"
comboString("hi", "Hello") → "hiHellohi"
comboString("aaa", "b") → "baaab"

- 本来题目很简单，最初的程序写成了：
```java
  String short = ((a.length() > b.length()) ? b:a);
  String long = ((a.length() > b.length()) ? a:b);
  return short+long+short;
```
	结果一直报错，看了很久才意识到，short和long是保留关键字，不应该用它们作为变量名。改成以下就好了。
```java
  String sshort = ((a.length() > b.length()) ? b:a);
  String slong = ((a.length() > b.length()) ? a:b);
  return sshort+slong+sshort;
```
## atFirst
- 还是那个问题，如果有if-else if-else if ，一定要有个else，覆盖return。
# Logic-1
## lessBy10
题意理解特别重要,`if one of them is 10 or more less than one of the others.` 是什么意思？
断句应该是`if one of them is 10 or more, less than one of the others.`
## sumLimit
- 如何计算一个int值的长度？
- 转化成string，再算该string的长度。`String.valueOf(x).length();`
# Map-1
```java
map.containsKey(key); // return false or true;
map.put(key,value); //赋值
map.get(key) //取值 or null
map.remove(key) //removes the key
```
# Map-2
## word0
1. 如何新建一个map？
要确定map的key和value的类型。`Map<String,Integer> map = new HashMap<String,Integer> ();`

2. 如何循环一个数组？
如果不需要重新修改strings，用`for(String s : strings) `
如果需要重新修改strings，用`for(int i=0; i<strings.length; i++)`
# Functional-1
## doubling
- list.replaceAll()
```java
public List<Integer> doubling(List<Integer> nums) {
  nums.replaceAll(n -> n * 2);
  return nums;
}
```
- list.removeIf()  `nums.removeIf(n -> n<10);`
## removeX
这个 `n -> f(n)`，是可以写一个函数的。例如：

```java
public List<String> noX(List<String> strings) {
  strings.replaceAll(n -> removeX(n));
  return strings;
}
public String removeX(String s){
  String r = "";
  for(int i = 0; i<s.length(); i++){
    if(s.charAt(i)!='x')
      r+=s.charAt(i);
  }
  return r;
}
```
# String-3
## countYZ

Given a string, count the number of words ending in 'y' or 'z' -- so the 'y' in "heavy" and the 'z' in "fez" count, but not the 'y' in "yellow" (not case sensitive). We'll say that a y or z is at the end of a word if there is not an alphabetic letter immediately following it. (Note: Character.isLetter(char) tests if a char is an alphabetic letter.)
countYZ("fez day") → 2
countYZ("day fez") → 2
countYZ("day fyyyz") → 2

- 最开始的思路是找到所有非字母的，check它之前是否为y、z；但未通过other tests。
- 用题目名搜了google，经过提示发现可以换一种思路：找到所有为y、z的，check它后面是否为非字母，完全正确。
## 剩余的一些函数
```java
Character.isLetter(char); //是否是字符
Character.isDigit(char); //是否是数字
String.valueOf(int/boolean); //数字->string
Integer.parseInt(String); //string->数字
```
# Functional-2
## noNeg
- nums.removeIf(n -> 条件);
# Array-3
## maxMirror

We'll say that a "mirror" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.


maxMirror([1, 2, 3, 8, 9, 3, 2, 1]) → 3
maxMirror([1, 2, 1, 4]) → 3
maxMirror([7, 1, 2, 9, 7, 2, 1]) → 2

这应该是整个array-3中最难的一题了。
- 我最开始的思路是将子数组作为整体去check，那么对于每一个size为n的数组，我要顺着找一遍，逆着找一遍，还得不断check两个子数组是否相等，demo写出来非常复杂。
- 搜了一下别人的思路：顺着对于每一个可能的子数组起点start，我先逆着去找reverse数组的起点reverseStart，确定好了两个起点，再往中间去数，有多少个能重合，记录最大的重合数。这个思路实现起来就方便很多；
```java
public int maxMirror(int[] nums) {
 int len = nums.length;
  int count = 0;
  int max = 0;
  int i,j;
  for(int start = 0; start<len; start++){
    for(int reverseStart = len-1; reverseStart >= 0; reverseStart--){
      if(nums[start] == nums[reverseStart]){
        i = start;
        j = reverseStart;

        while(i<len && j>=0 &&nums[i]==nums[j]){
          count++;
          i++;
          j--;
        }
        max = Math.max(max,count);
        count = 0;
      }
    }
  }
  return max;
  
}

```
# Recursion-1
## 对递归的理解
以前对递归的理解非常浅，只会fibonacci这种入门级简单的题目，经常搞不清楚怎么用递归的思路去分析一个问题——当然现在来看原因非常明显，就是练的少，遇到的少，于是思考的就少，一直就保持着糊里糊涂的状态。所以短时间内大量练习同一专题是非常有效的策略，codingjava这里的recursion非常棒。

## 用递归去计算和/数
- Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
这是一个非常典型的例子，之前这种题目我都是转化为字符串用循环做，这回逼你用递归做：
1. 第一步就是要去考虑，什么是base情况——很明显n为一位数的时候
2. base情况的时候你要return什么——这需要看题目最后要计算什么，这里计算和，那么就return 一位数的n本身。
3. 怎么不断的把当前n变为base状态——你怎么从n中分离base状态和非base状态。

## 递归中需要更多判断

- count8
- Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).

count8(8) → 1
count8(818) → 2
count8(8818) → 4

我之前卡在这道题目是因为我认为需要一个flag在递归的过程中标记前一个数是否是8，但我又不知道如何让flag在各层递归中传递。
瞄了一眼别人的程序发现很简单，意识到自己思路上走进了死胡同，我可以直接判断前一个数是否为8，不需要flag。
并且一定要有个base状态，base状态的return一定是一个数，不再继续递归了。

```java
public int count8(int n) {
  if (n<10) return n==8?1:0;
  else if(n%10==8 && (n/10)%10==8) return 2+count8(n/10);
  else if(n%10==8 && (n/10)%10!=8) return 1+count8(n/10);
  else return count8(n/10);
}

```

## 递归的起始是什么？
- changePi 
Given a string, compute recursively (no loops) a new string where all appearances of "pi" have been replaced by "3.14".


changePi("xpix") → "x3.14x"
changePi("pipi") → "3.143.14"
changePi("pip") → "3.14p"

- 本题要求把所有pi的地方都换成3.14.我一直卡住的原因是我认为需要逐个检查2位，但如果是pi就必须跳过这个2位。但只要换一种方式思考——起始是什么？起始是str所有的字符啊，我可以控制这个逻辑，让检查跳1位还是两位。

```java
public String changePi(String str) {
  if(str.length()<2) return str;
  else if(str.substring(0,2).equals("pi"))
    return "3.14"+changePi(str.substring(2));
  else
    return str.substring(0,1)+changePi(str.substring(1));
}
```