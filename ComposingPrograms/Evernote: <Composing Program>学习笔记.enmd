---
title: <Composing Program>学习笔记
notebook: AAAA
tags:
---
# Chapter 1: Building Abstractions with functions

## 1.1 Getting Started

> fundamental ideas : representing information, specifying logic to process it, designing abstractions that manage the complexity of that logic.

> These fundamental ideas have long been taught using the classic textbook Structure and Interpretation of Computer Programs (SICP).

最基础的概念是如何表达信息（数据结构），用什么样的逻辑去运算（算法？），以及想办法用抽象去降低整个逻辑的复杂度（为了人脑能处理的复杂度考虑）。所以我的任务就是关注这几个方面到底怎样去提高，能学到什么框架和方法。


### 1.1.3 interaction

> Each session keeps a history of what you have typed. To access that history, press ctrl-P (previous) and ctrl-N (next). ctrl-D exits a session, which discards this history. 

可以用ctrl-P (previous) and ctrl-N (next). ctrl-D exits a session 去了解你曾经输入的历史命令。（以前我只会用方向键，学到了）。

### 1.1.4 First example

Broadly, computer programs consist two kinds of instructions:
1. compute some value —— expressions
2. carry out some action —— statements

在这个过程中，我们会接触到：
1. data
2. Function——chapter1
3. Object(有data，也有操作data的function)——chapter2
4. Interpreter（A program that implements such a procedure, evaluating compound expressions, is called an interpreter.）——chapter3

```python

from urllib.request import urlopen

# statements(用了一个函数)，现在shakespeare是一个object
shakespeare = urlopen('http://composingprograms.com/shakespeare.txt')

# statements(用了很多个函数)，现在words是一个set()object了
words = set(shakespeare.read().decode().split())

# expression 
{w for w in words if len(w) == 6 and w[::-1] in words}

```

** 分辨expression和statements感觉有个很简单的方式，就是code会不会有返回值。**

## 1.2 Elements of Programming

Program Language = 

1. a means for instructing a computer to perform tasks.
2. a framework within which we organize our ideas about computational processes. 

So programs must be written for people to read, and only incidentally for machine to exeute.（这句话就是经典的——程序应该是写给人看去交流idea，偶尔给机器跑）

从以上这段话可以看出，最重要的是idea. We should pay attention to the means that the language provides for combining simple ideas to form complex ideas.有以下三个机制：

1. primitvie expressions and statements: simplest building blocks;
2. means of combination: combine simple ones to form complex ones
3. means of abstraction: compound elements can be named and manipulated as units.

果然是好书，我以前的感觉是学会了一堆零件，自己要设计联合运用的方式（combine）要设计抽象去解决问题，但并没有章法。其实如何更好的combine、如何更好的抽象，是有方法的。


### 1.2.1 Expressions

`-1 - -1 ——> 0` 这种是operand(numbers) and mathematical operator. 特征是infix，即operator 在 operand之间。

### 1.2.2 Call expressions

`function(operand, operand) ——> value` 

比如一些数学函数 `max(9,2), pow(2,100)` , 这个特征是opertor在括号外，括号里是operand。

### 1.2.3 Importing library functions

> An import statement designates a module name (e.g., operator or math), and then lists the named attributes of that module to import (e.g., sqrt). Once a function is imported, it can be called multiple times.

function分三种：built-in（就在environment里，无需import）, python自带库（不在environment里，需要import，但不需要安装), 第三方库(不在这个机器上，需要安装，需要import)。

### 1.2.4 Names and environment
1. the simpest means of abstraction

We use '=' to do assignment statement: binding a name to a value, then this name represents this value, and using the name we can retrieving this value.functions can also be binded to names.


```
#binding的示例
>>> max
<built-in function max>

>>> f = max
>>> f
<built-in function max>
>>> f(9,2)
9
```


We can also assign multiple values to multiple names in a single statement.

```
# = 的示例
area, circumference = pi * radius * radius, 2 * pi * radius
```

2. environment = a memory tracks names,values and bindings.

为了做到以上的binding，肯定需要一个有记忆的东西去存储names,values and bindings，那么这个memory就是environment。如果没有environment，`add(x,1)` 这个statement没有任何意义，因为我们不知道x代表什么，甚至add代表什么，所以**environment的重要性在于提供程序运行的context**。

本小节很好的解释了environment的意思，其实把它看做程序运行的memeroy就行，包括import进来的function.

### 1.2.5 evaluating nested expressions

**nested expressions是一种combine的方式！**

nested expressions like `sub(pow(2, add(1, 10)), pow(2, 5))`，程序的执行过程其实用到了**recursive**, 可以画一棵expression tree来看从root到node，再从node返回到root最终得到result的过程，就是递归的过程。

### 1.2.6 The Non-Pure Print Function

There are two types of functions:
1. The Pure Function : input --> output
2. The Non-Pure Function: input -- no output(Return None), e.g. Print()

这个很好懂，有返回值和没有返回值（None）的两种函数嘛。

## 1.3 Defining New Functions

As far as we know:
- numbers and arithmetic operations are **primitive built-in data values and functions**
- nested functions provides a means of **combining operations.**
- Binding names to values/functions provides a means of **abstraction.**

就像之前说的，主线是学习这三点（重点是后两者），所以这种总结帮助我把已知的东西挂到这个框架（知识树）上。

本章重点在于A new and powerful abstraction technique —— Defining New Functions.（自定义函数是另一种强大的abstraction方式，可以把一堆操作封装抽象成一个building block/unit），给它一个名字，我们就可以用这个名字，只考虑输入输出，不用考虑一堆细节。

```
def <name>(<formal parameters>):
	(body)
	return <return expression>


# e.g.
def cal_area(x,y):
	return x*y

def g():
	return 2
```

### 1.3.1 Environments

把environments想象成一个个frame/box, 它储存了所有被assignment binding的names/values，并且track the changes。

更核心的概念是：global environment和 function自己的environment。从现在来看，global box里面会存function name 指代 function, function有自己的box，**function被call几次，就会建几个local frame**。(这也提示了以前我犯的错误，local frame也是占内存的，所以如果一个function被call 太多次，内存也会溢出。)

> This example illustrates many of the fundamental ideas we have developed so far. Names are bound to values, which are distributed across many independent local frames, along with a single global frame that contains shared names. A new local frame is introduced every time a function is called, even if the same function is called twice.

### 1.3.4 Local names

>  a function's implementation that should not affect the function's behavior.

function不管使用什么name去代表参数，behavior都一样。

但，还是要学会怎么Chosing Names，因为程序大部分时间是给人读的，良好的起名能降低人面对的complexity。

### 1.3.6 Functions as Abstractions
function被抽象作为一个unit后，the details is abstracted away，大家不再关心它的具体怎么实现，所以function要体现的是：输入，输出，作用。

> For example, any square function that we use to implement sum_squares should have these attributes:
> - The domain is any single real number.
> - The range is any non-negative real number.
> - The intent is that the output is the square of the input.


### 1.3.7 Operators
Python expressions with infix operators each have their own evaluation procedures, but you can often think of them as short-hand for call expressions.

```
from operators import add,mul
# = 2+4
print(add(2,4))
# = 4*2
print(mul(4,2))  

```


## 1.4 Designing Functions

Guidelines to a good designed function:

1. Each function should have exactly one job. That job should be identifiable with a short name and characterizable in a single line of text. Functions that perform multiple jobs in sequence should be divided into multiple functions.
2. Don't repeat yourself is a central tenet of software engineering. The so-called DRY principle states that multiple fragments of code should not describe redundant logic. Instead, that logic should be implemented once, given a name, and applied multiple times. If you find yourself copying and pasting a block of code, you have probably found an opportunity for functional abstraction.
3. Functions should be defined generally. Squaring is not in the Python Library precisely because it is a special case of the pow function, which raises numbers to arbitrary powers.

### 1.4.1 Documention

如果你用"""/"""的形式增加function的文档说明，你可以使用help(name_of_function)来获取function的文档说明。

```
def pressure(v, t, n):
        """Compute the pressure in pascals of an ideal gas.

        Applies the ideal gas law: http://en.wikipedia.org/wiki/Ideal_gas_law

        v -- volume of gas, in cubic meters
        t -- absolute temperature in degrees kelvin
        n -- particles of gas
        """
        k = 1.38e-23  # Boltzmann's constant
        return n * k * t / v
```


### 1.4.2 default Argument Values

`def pressure(v, t, n=6):` 可以只输入前两个arguments，此时使用默认n；也可以输入三个arguments，此时n使用输入值。

## 1.5 Control

> The expressive power of the functions that we can define at this point is very limited.
> expressive 能表现出的...

Control statement解决的问题是：进行某种比较，并且根据不同的比较结果执行不同的操作。

### 1.5.1 statements
statements和expressions到底有什么区别呢？看完了例子，我总结就是是否对environment有影响：
- expression是用已有的值进行计算得到一个result，但本身对program和environment没有任何影响（算完了就算完了，也不储存不return）
- statement执行某种操作，产生某种side-effect，增删改打印。

作者最后提及，程序总体来说是由statement组成的，但真正精华部分是在expression，而statement是创造了一个expression之间的关系，使得最后产出我们想要的结果。

### 1.5.2 compound statements

> Compound statements typically span multiple lines and start with a one-line header ending in a colon, which identifies the type of statement.

```
 <header>:
    <statement>
    <statement>
    ...
<separating header>:
    <statement>
    <statement>
    ...
...
```

普通的statement就是一句，结尾没有`:`。compound statement是由一个header，一个`：`，和多个statement组成的（indentation要保持一致，tab虽然方便，但是不同环境下一个tab被定义的长度可能不一样，需要注意）。def很明显是compound，if也是，但我没想过其实它们可以被抽象出同一种东西来，if和def剩下的statement程序执行的区别其实是根据`<header>`去定义的。


### 1.5.3 Defining Functions II: Local Assignment

本节讲function的local environment，核心idea在1.3.1中已讲，如下：

> 更核心的概念是：global environment和 function自己的environment。从现在来看，global box里面会存function name 指代 function, function有自己的box，**function被call几次，就会建几个local frame**。(这也提示了以前我犯的错误，local frame也是占内存的，所以如果一个function被call 太多次，内存也会溢出。)。

本节还补充了一个概念**assginment statement的作用就是在当前environment中将name和value进行bind，不会影响其他environment.**换言之，function内部的assignment仅作用于function的frame，global的assignment仅作用于global，这对modular programs非常重要（模块化）.


举个例子说明上面的概念：
- Global environment：
	+ percent_difference
	+ result = 25.0
	+ result2 = 25.0

- local environment-percet_difference1
	+ x = 40
	+ y = 50
	+ difference = 10
	+ return value = 25.0
- local environment-percet_difference2
	+ x = 60
	+ y = 70
	+ difference = 10
	+ return value = 25.0

```
1	def percent_difference(x, y):
2	    difference = abs(x-y)
3	    return 100 * difference / x
4	result = percent_difference(40, 50)
5   result2 = percent_difference(60, 70)

```


### 1.5.4 + 1.5.5 if-else + loop

这两节介绍了if-elif-else和while（loop）,由于很熟悉，简单过掉。


### 1.5.6 testing
由于程序越发的复杂，写完程序之后需要进行测试来保证实现结果和我们预期的一致。

1. assertion
用assert语句来写好输入和输出，如果正确，什么都不会发生；如果错误，会提示是哪个测试用例失败了。可以写在同一个文件里（甚至一个函数里），也可以单独写一个_test.py（如果测试用例很多的话）.
tests are typically written in the same file or a neighboring file with the suffix _test.py.

```
def fib(n):
    k = 2
    per, cur = 0,1
    while(k < n):
        per, cur = cur, per+cur
        k = k + 1
    return cur

def fib_test():
    assert fib(8) == 13, 'the 8th fibonacci number should be 13'


fib_test()

```


2. Doctests
可以直接在函数的文档中来写测试用例`""" """`，具体描述如下：

```
def sum_naturals(n):
    """Return the sum of the first n natural numbers.
    >>> sum_naturals(10)
    55
    >>> sum_naturals(100)
    5050
    """
    total = n*(n+1)/2
    return total

```


2.1 第一种使用方法，写函数调用doctest
```
from doctest import run_docstring_examples
run_docstring_examples(sum_naturals, globals(),True)

# 输出
Finding tests in NoName
Trying:
    sum_naturals(10)
Expecting:
    5
**********************************************************************
File "cp1_test.py", line 20, in NoName
Failed example:
    sum_naturals(10)
Expected:
    5
Got:
    55
Trying:
    sum_naturals(100)
Expecting:
    5050
ok

```

2.2 第二种使用方法，直接在终端内使用

```
python -m doctest [python_source_file]cp1_test.py

# 输出
Finding tests in NoName
Trying:
    sum_naturals(10)
Expecting:
    5
**********************************************************************
File "cp1_test.py", line 20, in NoName
Failed example:
    sum_naturals(10)
Expected:
    5
Got:
    55
Trying:
    sum_naturals(100)
Expecting:
    5050
ok
**********************************************************************
File "cp1_test.py", line 20, in cp1_test.sum_naturals
Failed example:
    sum_naturals(10)
Expected:
    5
Got:
    55
**********************************************************************
1 items had failures:
   1 of   2 in cp1_test.sum_naturals
***Test Failed*** 1 failures.

```

## 1.6 Higher-Order Functions

之前我们学习到的是：function可以看做是一种方法的抽象——比如square(x)，x取任何值都能完成对x求平方；这样我们就不用每次都实现特定的操作；如下：

```python
from math import pi, sqrt

def area(r, shape_constant):
	assert r > 0, 'A length must be positive.'
	return r * r * shape_constant

def area_square(r):
	return area(r, 1)

def area_circle(r):
	return area(r, pi)

def area_hexagon(r):
	return area(r, 3 * sqrt(3) / 2)
# 可以使用 python -i ex.py 
# >>> area_hexagon(10)
```



本节我们要学习到的是：多个方法有时候有共同之处——比如求前x个数之和，求前x个数的平方之和，求前x个数的立方之和等，我们能从functions上再抽象一层，形成pattern(求前x个数的某种操作之和，操作可以是平方、立方)。这样我们就不用每次实现特定的function。

### 1.6.1 Functions as Arguments
- 写一个function作为pattern，
- 再写几个function进去作为可选择的操作，
- 最后可以利用pattern，传入操作function，抽象出真正使用的function：

代码如下，需要注意我自己实现的时候，习惯`print  sum_of_pattern(n,cube)`，但这样的话参数就是两个，不符合一个参数。因为还不知道怎样可以再抽象一层，变成`def sum_of_cube(n): return sum_of_pattern(n, cube)`即可.

```python
def sum_k(k, pattern_k):
	"""
	sum the first n terms of sequence
	>>> sum_k(5, cube)
	225
	"""
	sum_all = 0
	for i in range(1,k+1):
		sum_all += pattern_k(i)
	return sum_all


def natural(k):
	return k

def cube(k):
	return k * k * k

def complicated(k):
	return 8 / ((4 * k - 3) * (4 * k - 1))

## 注意使用doctest来建立test意识和简化test方式
# python3 -m doctest  ex.py
# python3 -m doctest -v  ex.py
```

### 1.6.2

计算sqare_root的过程是：

```python
def square_root(a):
	"""
	>>> square_root(4)
	2.000000000000002
	"""
	guess = 1
	print(guess)
	while not square_root_close(guess, a):
		guess = square_root_update(guess, a)
	return guess

def square_root_close(x, y, tolerance=1e-10):
	return abs(x*x - y) < tolerance

def square_root_update(guess, a):
	return (guess + a / guess) /2 
```


计算cube_root的过程是：

```python
def cube_root(a):
	guess = 1
	print(guess)
	while not cube_root_close(guess, a):
		guess = cube_root_update(guess, a)
	return guess

def cube_root_close(x, y, tolerance=1e-10):
	return abs(x*x*x - y) < tolerance

def cube_root_update(x, a):
	return (2 * x + a / (x * x)) / 3 


```

能看到整体的一个通用过程是：

```python

def improve(update, close, guess=1):
	while not close(guess):
		guess = update(guess)
	return guess

def approx_eq(x, y , tolerance=1e-10):
	return abs(x- y) < tolerance

```

只是update和close的操作根据目标不一样而已，我就可以改成：

```python
def square_root(a):
	def square_root_close(guess):
		return approx_eq(guess * guess , a)

	def square_root_update(guess):
		return (guess + a / guess) /2 
	return improve(square_root_update, square_root_close)

def cube_root(a):
	def cube_root_close(guess):
		return approx_eq(guess * guess * guess , a)

	def cube_root_update(guess):
		return  (2 * guess + a / (guess * guess))/ 3  
	return improve(cube_root_update, cube_root_close)

def improve(update, close, guess=1):
	while not close(guess):
		guess = update(guess)
	return guess

def approx_eq(x, y , tolerance=1e-10):
	return abs(x- y) < tolerance


```

过程是：首先归纳出你要实现的种种情况的pattern，哪些是独有的，哪些是通用的，把通用的抽象出来，独有的写成函数当做参数传入。


------

一个涉及众多计算的过程应该怎么写代码？设想这样的流程：如果guess*guess 和 guess+1 之间的绝对值大于一个值，那么将guess置为1/guess + 1，否则输出guess.

如果我自己来写代码，会写成：
```python
# 注意 python2 中需要写成1.0/guess， Python3中可以写成1/guess，是因为两者语法中除法定义不同
def imporve(guess=1,tolerance=0.001):
	while(abs(guess*guess - (guess+1)) > tolerance):
		guess = 1.0/guess + 1
	return guess

if __name__ == '__main__':
	print imporve()

```

但书上将所有的计算都封装在function内，然后把function作为参数传进去：
```python

def improve(close, update, guess=1):
	while not close(guess):
		guess = update(guess)
	return guess

def golden_update(guess):
	return 1/guess + 1

def square_close_to_successor(guess):
	return approx_eq(guess*guess, guess+1)

def approx_eq(x,y,tolerance=0.001):
	return abs(x-y)<tolerance

phi = improve(square_close_to_successor, golden_update)

```

两者计算起来没有什么不同，但是维护和拓展却有很大的不同；我自己写的体现出了一个特点——我只理解函数是对过程的抽象，独立于变量，所以只有数值是传进来的；但没有理解函数本身也可以是函数的抽象，模块化过程变成一个个小函数，然后用一个大函数统一。


### 1.6.3 Defining Functions III: Nested Definitions

补充理解：为什么需要nested definition?

如果按照1.6.2的思路，我们把一个复杂大过程里所有可能被重复的小过程，以及小过程中的过程都抽象为函数定义在global里，使用函数本身作为参数，我们的抽象层次就高了一层——**只关心过程之间的组合，不关心过程本身的实现**。

那么势必会出现这样的情况：f1内调用f2，f2内调用f3. (如同sqrt 调用 improve，improve 调用 square_close和 sqrt_update)，但所有的函数本身都是定义在gloabl里的，在调用f2、f3的时候，它们使用的除了自己local frame的值，还有global frame的值；即f1中的值无法被f2、f3使用，必然需要传来传去。简单的过程还好，复杂的过程你不光需要组合过程，还得考虑更新每个过程使用的值。

怎么样解决这个问题呢？把一些函数定义在另外一些函数里面，如果f3、f4一定要使用f1内的值，那么就把f3、f4定义在f1内。

----------

用上一节improve方法实现sqrt函数：

```python
def sqrt(a):
	return improve(square_close, sqrt_update, a)

def improve(close, update, a, guess=1):
	while not close(guess,a):
		#print guess, a
		guess = update(guess,a)
	return guess

def square_close(guess,a):	
	return approx_eq(guess*guess, a)

def approx_eq(x, y, tolerance=0.001):
	return abs(x - y)<tolerance

def sqrt_update(x, y):
	return average(x, y/x)

def average(x, y):
	return (x + y)/2.0

if __name__ == '__main__':
	print sqrt(25)


```

缺点：（1）没办法复用上一节的improve函数，因为update和close函数在guess之外还需要a这个参数，improve必须修改，但improve就没办法到处复用了。

解决方案：Nested Definitions

```python

# 由于sqrt_update 和 sqrt_close 被定义在sqrt里面，所以他们的parent环境是sqrt，而a在sqrt环境里，故可以直接使用这个变量。
def sqrt(a):
	def sqrt_update(x):
		return average(x, a/x)
	def sqrt_close(x):
		return approx_eq(x*x, a)
	return improve(sqrt_close, sqrt_update)


def average(x, y):
	return (x + y)/2.0

def approx_eq(x, y, tolerance=0.001):
	return abs(x - y)<tolerance

def improve(close, update, guess=1):
	while not close(guess):
		guess = update(guess)
	return guess
```


We require two extensions to our environment model to enable lexical scoping.
- Each user-defined function has a parent environment: the environment in which it was defined.[被定义的地方就是它的父环境]
- When a user-defined function is called, its local frame extends its parent environment.[不管这个函数在哪里被call，它的local frame都能延展到它的父环境，实现共享]
- 第一条好理解，第二条可以这样考虑：improve的parent是global，它在sqrt里被call，但还是能够和global共享；sqrt_update的parent是sqrt，它在improve里被call，但还是能和sqrt共享实现对a的取值。

#### Extended Environment
考虑这个问题，sqrt average approx_eq improve 都被定义在global环境里。 为什么sqrt_update可以用global中的函数呢？
因为一个函数总有两个frame: local 和 global， 有了nested definition后，sqrt_update就有三个frame： the local sqrt_update frame, the sqrt frame in which sqrt_update was defined (labeled f1), and the global frame. a这个值，local frame里没有，那么找parent frame, 再找global frame。

那么延伸一下，global中就不能直接调用nested local function，因为大环境里没有小环境，小环境则有大环境：

```python
def sqrt(a):
    def sqrt_update(x):
        return average(x, x)
    def sqrt_close(x):
        return approx_eq(x*x, a)
    return improve(sqrt_close, sqrt_update)


def average(x, y):
    return (x + y)/2.0

def approx_eq(x, y, tolerance=0.001):
    return abs(x - y)<tolerance

def improve(close, update, guess=1):
    while not close(guess):
        guess = update(guess)
    return guess
    
# 报错：NameError: name 'sqrt_update' is not defined 
print(sqrt_update(10))

```


### 1.6.4 Function As Returned Value

之前说function 可以作为value被传入，它也可以作为value 被 return,  这意味着什么呢？ 意味着一个函数的结果是一个函数。我可以使用这样的操作`make_adder(3)(1)`，因为`make_adder(3)`返回了一个函数，我可以继续使用这个函数。

```python
def make_adder(n):
	"""	
	>>> make_adder(1)(2)
	3
	"""
	def add_again(k):
		return k+n
	return add_again
```


### 1.6.5 Example: Newton's Method


```python
def improve(close, update, guess=1):
    while not close(guess):
        guess = update(guess)
    return guess
def approx_eq(x, y, tolerance=0.0001):
    return abs(x-y)<tolerance

def newton(f, df):
    def update(x):
        return x - f(x)/df(x)

    def close(x):
        return approx_eq(f(x),0);

    return improve(close, update)


def square_root_newton():
    def f(x):
        return x * x - 2;
    def df(x):
        return 2 * x;
    return newton(f,df)




```